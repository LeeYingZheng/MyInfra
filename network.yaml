Description: >
  My first CF template that deploys a VPC with network components (public
  subnets, private subnets, route tables, security groups etc.) across 2-3 AZs.
  Future works include deploying a cross stack with EKS cluster in the private
  subnets.

Parameters:
  Environment:
    Type: String
    AllowedValues:
      - DEV
      - TEST
      - PROD

  NumAZs:
    Description: Number of Availability Zone(s) in given region
    Type: Number
    AllowedValues:
      - 2
      - 3
    Default: 3

  VpcCIDR:
    Description: IP range (CIDR notation) for this VPC
    Type: String
    Default: 172.32.0.0/16

  PublicSubnet1CIDR:
    Description: IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 172.32.10.0/24
    # Default: !Select [0, !Cidr [!Ref VpcCIDR, 3, 8]]
  PublicSubnet2CIDR:
    Description: IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 172.32.11.0/24
    # Default: !Select [1, !Cidr [!Ref VpcCIDR, 3, 8]]
  PublicSubnet3CIDR:
    Description: IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 172.32.12.0/24
    # Default: !Select [2, !Cidr [!Ref VpcCIDR, 3, 8]]  
  PrivateSubnet1CIDR:
    Description: Enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 172.32.20.0/24

  PrivateSubnet2CIDR:
    Description: Enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 172.32.21.0/24
  
  PrivateSubnet3CIDR:
    Description: Enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 172.32.22.0/24

  EKSInstanceType:
    Description: Select instance type for EKS Node Groups
    Type: String
    Default: t3a.medium
    AllowedValues:
      - t3.medium
      - t3a.medium
      - t3a.large
  
  EKSAutoscalingMinSize:
    Type: Number
    Default: 1
    Description: Minimum Size of Node Group ASG
  
  EKSAutoscalingMaxSize:
    Type: Number
    Default: 4
    Description: Maximum size of Node Group ASG
  
  EKSAutoscalingDesiredSize:
    Type: Number
    Default: 3
    Description: Desired capacity of Node Group ASG

Mappings:
  eksCapacityTypes:
    DEV:
      capacityType: SPOT
    TEST:
      capacityType: ON_DEMAND
    PROD:
      capacityType: ON_DEMAND

Conditions:
  TripleAZs: !Equals [!Ref NumAZs , 3]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub VPC-${AWS::StackName}

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name 
          Value: !Sub IG-${AWS::StackName}

  # IGW must come with IGW-Attachment
  InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        InternetGatewayId: !Ref InternetGateway
        VpcId: !Ref VPC
  
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
                        - 0
                        - !GetAZs
                          Ref: "AWS::Region"
      Tags:
        - Key: Name
          Value: !Sub Public-1-${AWS::StackName}

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
                        - 1
                        - !GetAZs
                          Ref: "AWS::Region"      
      Tags:
        - Key: Name
          Value: !Sub Public-2-${AWS::StackName}
  
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Condition: TripleAZs
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet3CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
                        - 2
                        - !GetAZs
                          Ref: "AWS::Region"      
      Tags:
        - Key: Name
          Value: !Sub Public-3-${AWS::StackName}

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select
                        - 0
                        - !GetAZs
                          Ref: "AWS::Region"         
      Tags:
        - Key: Name
          Value: !Sub Private-1-${AWS::StackName}

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select
                        - 1
                        - !GetAZs
                          Ref: "AWS::Region"         
      Tags:
        - Key: Name
          Value: !Sub Private-2-${AWS::StackName}

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Condition: TripleAZs
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIoOnLaunch: false
      AvailabilityZone: !Select
                        - 2
                        - !GetAZs
                          Ref: "AWS::Region"
      Tags:
        - Key: Name
          Value: !Sub Private-3-${AWS::StackName}
  
  # EIP must include DependsOn: IGW-Attachment when it is associated with a VPC defined in same template
  EIP1:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  EIP2:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  EIP3:
    Type: AWS::EC2::EIP
    Condition: TripleAZs
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP1.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP2.AllocationId
      SubnetId: !Ref PublicSubnet2

  NatGateway3:
    Type: AWS::EC2::NatGateway
    Condition: TripleAZs
    Properties:
      AllocationId: !GetAtt EIP3.AllocationId
      SubnetId: !Ref PublicSubnet3

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub PublicRT-${AWS::StackName}
  
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  PublicRTA1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicRTA2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  
  PublicRTA3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: TripleAZs
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3
  
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub PrivateRT1-${AWS::StackName}
  
  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
      RouteTableId: !Ref PrivateRouteTable1
  
  PrivateRTA1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub PrivateRT2-${AWS::StackName}
  
  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2
      RouteTableId: !Ref PrivateRouteTable2
  
  PrivateRTA2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2
  
  PrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    Condition: TripleAZs
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub PrivateRT3-${AWS::StackName}
  
  PrivateRoute3:
    Type: AWS::EC2::Route
    Condition: TripleAZs
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway3
      RouteTableId: !Ref PrivateRouteTable3
  
  PrivateRTA3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: TripleAZs
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      SubnetId: !Ref PrivateSubnet3
  
  PublicSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host and traffic to private subnets
      GroupName: Public_SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub PublicSG-${AWS::StackName}
        
  PrivateSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic from public security group
      GroupName: Private_SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: 65535
          SourceSecurityGroupId: !GetAtt PublicSG.GroupId
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: 65535
          DestinationSecurityGroupId: !GetAtt PublicSG.GroupId
      Tags:
        - Key: Name
          Value: !Sub PrivateSG-${AWS::StackName}

  # PublicSG rules to allow egress and ingress from PrivateSG. Prevent deadlocks
  PublicOutbound:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: -1
      FromPort: -1
      ToPort: 65535
      DestinationSecurityGroupId: !GetAtt PrivateSG.GroupId
      GroupId: !GetAtt PublicSG.GroupId
  
  PublicInbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: -1
      FromPort: -1
      ToPort: 65535
      SourceSecurityGroupId: !GetAtt PrivateSG.GroupId
      GroupId: !GetAtt PublicSG.GroupId
  
  PublicNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub PublicNACL-${AWS::StackName}
  
  PubNaclInbound:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PublicNACL
       RuleNumber: 100
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 80
         To: 80
  
  PubNaclOutbound:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PublicNACL
       RuleNumber: 100
       Protocol: -1
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
  
  PubNaclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref PublicNACL
  
  PubNaclAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref PublicNACL

  PubNaclAssociation3:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Condition: TripleAZs
    Properties:
      SubnetId: !Ref PublicSubnet3
      NetworkAclId: !Ref PublicNACL

  PrivateNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub PrivateNACL-${AWS::StackName}
  
  NaclInbound:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PrivateNACL
       RuleNumber: 100
       Protocol: -1
       RuleAction: allow
       CidrBlock: !Ref VpcCIDR
  
  NaclOutbound:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PrivateNACL
       RuleNumber: 100
       Protocol: -1
       Egress: true
       RuleAction: allow
       CidrBlock: !Ref VpcCIDR
  
  NaclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      NetworkAclId: !Ref PrivateNACL
  
  NaclAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      NetworkAclId: !Ref PrivateNACL

  NaclAssociation3:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Condition: TripleAZs
    Properties:
      SubnetId: !Ref PrivateSubnet3
      NetworkAclId: !Ref PrivateNACL
      
  # https://medium.com/@metturarun/manage-aws-eks-nodes-through-aws-systems-manager-9483317e2ff4
  # need VPC endpoint + Systems Manager Session Manager to remote in 
  # private EKS node groups

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
    Export:
      Name: !Sub VPC-${AWS::Region}

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1
    Export:
      Name: PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2
    Export:
      Name: PublicSubnet2
  
  PublicSubnet3:
    Description: A reference to the public subnet in the 3rd Availability Zone
    Value: !Ref PublicSubnet3
    Condition: TripleAZs
    Export:
      Name: PublicSubnet3

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1
    Export:
      Name: PrivateSubnet1

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2
    Export:
      Name: PrivateSubnet2
  
  PrivateSubnet3:
    Description: A reference to the private subnet in the 3rd Availability Zone
    Value: !Ref PrivateSubnet3
    Condition: TripleAZs
    Export:
      Name: PrivateSubnet3
  
  PublicSG:
    Description: A reference to the security group for public EC2 instances
    Value: !Ref PublicSG
    Export:
      Name: PublicSG
  
  PrivateSG:
    Description: A reference to the security group for private EC2 instances
    Value: !Ref PrivateSG
    Export:
      Name: PrivateSG